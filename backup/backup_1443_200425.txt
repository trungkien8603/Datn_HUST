#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <ArduinoJson.h>
#include <HTTPClient.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "freertos/semphr.h"
#include "driver/timer.h"
#include <math.h>
#include "soc/timer_group_struct.h"
#include "soc/timer_group_reg.h"


#define TIMER_DIVIDER  16  // Bộ chia tần số timer (16 chia cho 1ms)
#define TIMER_SCALE    (TIMER_BASE_CLK / TIMER_DIVIDER)  // Tính tần số của timer
#define TIMER_INTERVAL 500  // Thời gian ngắt 500ms (0.5s)

// Thông số cảm biến MPU6050
#define FALL_THRESHOLD 5.0   // Ngưỡng rơi tự do (m/s^2)
#define ANGLE_THRESHOLD 60.0 // Ngưỡng góc nghiêng (độ)

// WiFi & Firebase
#define WIFI_SSID "Tang 3"
#define WIFI_PASSWORD "iloveyou"
#define FIREBASE_SECRET "IurUT7cyMoKG4ZPQj16iZuZLRFQuyoXGfZDY1ywa"
#define FIREBASE_HOST  "firstproject-f55ec-default-rtdb.asia-southeast1.firebasedatabase.app"

// Cấu hình timer và ngắt
TimerHandle_t xTimer = NULL;   // Handle của timer

volatile bool isTimerActive = false; // Trạng thái của timer (đang chạy hay không)
float acc, angle_x = 0, angle_y = 0; // Góc từ gyro
float accel_roll = 0, accel_pitch = 0; // Góc từ accelerometer
float angleY_t = 0, angleX_t = 0; // Góc từ accelerometer
float dt = 0.5;
bool http_initialized = false; // Biến kiểm tra trạng thái HTTP
volatile bool fallStatus = false; // Trạng thái ngã (true nếu ngã, false nếu không ngã)
bool hasInterrupt = false;


// Cảm biến MPU6050
Adafruit_MPU6050 mpu;
HTTPClient http; // Đối tượng HTTPClient để gửi dữ liệu đến Firebase

// Queue để truyền trạng thái ngã
QueueHandle_t fallQueue;
SemaphoreHandle_t interruptSemaphore;

#define INTERRUPT_PIN 16  // Chân ngắt bất kỳ


void IRAM_ATTR handleInterrupt() {
    xSemaphoreGiveFromISR(interruptSemaphore, NULL);
}

void detectFallTask(void *parameter);
void sendDataTask(void *parameter);
void measureFallTask(void *parameter);

void setup() {
    Serial.begin(115200);
    
    // Kết nối WiFi
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("WiFi connected");


 
    String url = "https://" FIREBASE_HOST "/users/kien.json?auth=" FIREBASE_SECRET;
     http_initialized =  http.begin(url);
    http.addHeader("Content-Type", "application/json");
    
    // Khởi tạo MPU6050
    if (!mpu.begin()) {
        Serial.println("Failed to find MPU6050 chip");
        while (1) { delay(10); }
    }
    Serial.println("MPU6050 Found!");
    //setupt motion detection
 mpu.setHighPassFilter(MPU6050_HIGHPASS_0_63_HZ);
 mpu.setMotionDetectionThreshold(50); // 25 LSB = 0.25g
 mpu.setMotionDetectionDuration(50);
 mpu.setInterruptPinLatch(true);	// Keep it latched.  Will turn off when reinitialized.
 mpu.setInterruptPinPolarity(true);
 mpu.setMotionInterrupt(true);
 mpu.enableSleep(false);
 mpu.setClock(MPU6050_PLL_GYROX);
 mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
 mpu.setGyroRange(MPU6050_RANGE_500_DEG);
    


    fallQueue = xQueueCreate(5, sizeof(int));
    interruptSemaphore = xSemaphoreCreateBinary();
    
    // Cấu hình ngắt ngoài
    pinMode(INTERRUPT_PIN, INPUT_PULLDOWN);
    attachInterrupt(digitalPinToInterrupt(INTERRUPT_PIN), handleInterrupt, FALLING);
    
    // Tạo Task
    xTaskCreate(detectFallTask, "Detect Fall", 4096, NULL, 2, NULL);
    xTaskCreate(sendDataTask, "Send Data", 4096, NULL, 1, NULL);

}

void loop() {
    vTaskDelete(NULL);
}

// Task 1: Phát hiện ngã
void detectFallTask(void *parameter) {
    while (1) {
        // Chờ ngắt để bắt đầu xử lý
        // if (!hasInterrupt) {
        //     if (xSemaphoreTake(interruptSemaphore, portMAX_DELAY) == pdTRUE) {
        //         hasInterrupt = true; // Bắt đầu xử 
              
        //     }
        // }

        // if (hasInterrupt) {
            // Thực hiện xử lý sau khi có ngắt
            sensors_event_t a, g, t;
            mpu.getEvent(&a, &g, &t);

            float ax = a.acceleration.x;
            float ay = a.acceleration.y;
            float az = a.acceleration.z;
            acc = sqrt(ax * ax + ay * ay + az * az);

            accel_roll = atan2(ay, sqrt(ax * ax + az * az)) * 180 / PI;
            accel_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 180 / PI;



            angleX_t = atan2(ax, sqrt(ay * ay + az * az)) * 180.0 / PI;
            angleY_t = atan2(ay, sqrt(ax * ax + az * az)) * 180.0 / PI;

            vTaskDelay(pdMS_TO_TICKS(200)); // Giữ task lại một chút trước khi đo lần 2

            // Đo lần 2
            sensors_event_t a_2, g_2;
            mpu.getEvent(&a_2, &g_2, &t);
            mpu.getMotionInterruptStatus(); // Đọc trạng thái ngắt chuyển động( mục đích để xóa cờ ngắt)

            float ax2 = a_2.acceleration.x;
            float ay2 = a_2.acceleration.y;
            float az2 = a_2.acceleration.z;

            acc = sqrt(ax2 * ax2 + ay2 * ay2 + az2 * az2);
            accel_roll = atan2(ay2, sqrt(ax2 * ax2 + az2 * az2)) * 180 / PI; //don vi ra độ
            accel_pitch = atan2(-ax2, sqrt(ay2 * ay2 + az2 * az2)) * 180 / PI;

            float G_x2 = g_2.gyro.x ;
            float G_y2 = g_2.gyro.y ;

            float angleX_s = angleX_t + G_x2 * dt;
            float angleY_s = angleY_t + G_y2 * dt;

            angle_x = 0.98 * angleX_s + 0.02 * accel_roll;
            angle_y = 0.98 * angleY_s + 0.02 * accel_pitch;


            // Serial.print("acc: ");
            // Serial.print(acc, 2);
            // Serial.print(" angle_x: ");
            // Serial.print(angle_x, 2);
            // Serial.print(" angle_y: ");
            // Serial.println(angle_y, 2);

            if (acc > 15.0 &&
                (abs(G_x2) > 400 || abs(G_y2) > 400) &&
                (abs(angle_x) > 60 || abs(angle_y) > 60)) {
                    Serial.println("Fall detected!");
                }
            xQueueSend(fallQueue, (const void*)&fallStatus, 0);

            // Reset trạng thái để vòng lặp sau chờ ngắt mới
            hasInterrupt = false;
        }
    }
// }
    

// Task 2: Gửi dữ liệu Firebase
void sendDataTask(void *parameter) {
    while (1) {
        if (WiFi.status() == WL_CONNECTED) {
          
            
            // int fallStatus = 0; // Mặc định không có ngã
            xQueueReceive(fallQueue,  (void*)&fallStatus, 0); // Kiểm tra nếu có dữ liệu trong queue
            
            StaticJsonDocument<200> doc;
            // doc["heartRate"] = random(60, 100);
            // doc["spo2"] = random(95, 100);
            // doc["fallStatus"] = fallStatus;
            doc["acc"] = acc;
            doc["angle_x"] =angle_x;
            doc["angle_y"] =angle_y;
            String jsonStr;
            serializeJson(doc, jsonStr);
            
            int httpResponseCode = http.PUT(jsonStr);
            Serial.println(httpResponseCode > 0 ? "Data sent successfully!" : "Failed to send data.");
            http.end();
        }
        vTaskDelay(pdMS_TO_TICKS(1000));
    }
}
